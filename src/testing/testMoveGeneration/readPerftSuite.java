package testing.testMoveGeneration;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.Scanner;
/*
    CODE GENERATED BY CHATGPT
*/
public class readPerftSuite {
    public static void main(String[] args) {

        int[] flip = {
                56, 57, 58, 59, 60, 61, 62, 63,
                48, 49, 50, 51, 52, 53, 54, 55,
                40, 41, 42, 43, 44, 45, 46, 47,
                32, 33, 34, 35, 36, 37, 38, 39,
                24, 25, 26, 27, 28, 29, 30, 31,
                16, 17, 18, 19, 20, 21, 22, 23,
                8, 9, 10, 11, 12, 13, 14, 15,
                0, 1, 2, 3, 4, 5, 6, 7,
                };
                System.out.println(flip.length);
        int[] egKingTable = {
                -50, -40, -40, -40, -40, -40, -40, -50
                - 40, -30, -20, -20, -20, -20, -30, -30,
                -40, -10, 20, 30, 30, 20, -20, -30,
                -40, -10, 30, 40, 40, 30, -20, -30,
                -40, -10, 30, 40, 40, 30, -20, -30,
                -40, -10, 20, 30, 30, 20, -20, -30,
                -40, -20, -20, -20, -20, -20, -30, -30,
                -50, -40, -40, -40, -40, -40, -40, -50,
                };
                System.out.println(egKingTable.length);

    /*
        try (Scanner scanner = new Scanner(new File("src/testing/testMoveGeneration/perftSuite.txt"))) {
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine(); // Reads one line
                String fen = getFEN(line);
                long[] perftTable = getValues(line);
                System.out.println("FEN>>>" + fen + "<<<");
                System.out.println("PerftTable: " + Arrays.toString(perftTable));
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        */
    }

    /**
     * Returns the FEN portion of the line (everything before the first semicolon).
     *
     * @param line a String containing the FEN and evaluation tokens.
     * @return the FEN string.
     */
    public static String getFEN(String line) {
        int semicolonIndex = line.indexOf(";");
        if (semicolonIndex != -1) {
            return line.substring(0, semicolonIndex).trim();
        }
        return line.trim(); // If no semicolon is found, return the whole line trimmed.
    }

    /**
     * Returns an array of long values corresponding to the evaluation values D1 ... D6.
     * Assumes that each token is in the format "Dx value" and that they appear in order.
     *
     * @param line a String containing the FEN and evaluation tokens.
     * @return a long array with the values (e.g., arr[0] for D1, ..., arr[5] for D6).
     */
    public static long[] getValues(String line) {
        // Split the line by semicolon. The first part is the FEN.
        String[] parts = line.split(";");

        // Create an array for the values (skip the first part, which is the FEN).
        long[] values = new long[parts.length - 1];

        // Loop through each evaluation token.
        for (int i = 1; i < parts.length; i++) {
            // Trim to remove any extra whitespace.
            String token = parts[i].trim(); // e.g., "D1 4"

            // Split the token on whitespace.
            String[] tokens = token.split("\\s+");
            if (tokens.length >= 2) {
                try {
                    // Parse the second token as a long.
                    values[i - 1] = Long.parseLong(tokens[1]);
                } catch (NumberFormatException e) {
                    // Handle the case where the value isn't a valid number.
                    System.err.println("Error parsing number from token: " + token);
                    values[i - 1] = 0;
                }
            }
        }
        return values;
    }

}
