package engine.evaluation;

import board.Position;
import moveGeneration.BishopLogic;
import moveGeneration.MoveGenerator;
import moveGeneration.RookLogic;

public class KingSafety {
    /**
     * This is a rough metric for king safety generated by supposing that the number of squares a queen in the place
     * of a king can attack is a negative thing for that king.
     *
     * This becomes a less valuable metric in the endgame, so, it is only used in the mid game
     */
    public static int kingSafetyEvaluation(Position position) {
        int whiteKingLoc = Long.numberOfTrailingZeros(position.pieceColors[0] & position.pieces[5]);
        int blackKingLoc = Long.numberOfTrailingZeros(position.pieceColors[1] & position.pieces[5]);

        int whiteQueenAttacks = Long.bitCount(RookLogic.getAttackBoard(position.kingLocs[0], position) | BishopLogic.getAttackBoard(position.kingLocs[0], position));
        int blackQueenAttacks = Long.bitCount(RookLogic.getAttackBoard(position.kingLocs[1], position) | BishopLogic.getAttackBoard(position.kingLocs[1], position));

        return (blackQueenAttacks - whiteQueenAttacks) * 3;
    }
}
